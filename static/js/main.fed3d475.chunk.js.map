{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","completed","title","classNames","TodoList","todos","map","getUser","userId","usersFromServer","find","App","useState","newTodos","setNewTodos","selectedUser","setSelectedUser","setTitle","isTitleError","setIsTitleError","isSelectError","setIsSelectError","handleChanges","event","target","value","action","method","onSubmit","preventDefault","newId","Math","max","addNewTodo","htmlFor","type","placeholder","onChange","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fed3d475.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype Prop = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Prop> = ({ user }) => {\n  const {\n    email,\n    name,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Prop = {\n  todo: Todo\n};\n\nexport const TodoInfo: React.FC<Prop> = ({ todo }) => {\n  const {\n    completed,\n    title,\n    user,\n  } = todo;\n\n  return (\n    <li className={\n      classNames('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })\n    }\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      {user && <UserInfo user={user} />}\n    </li>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Prop = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Prop> = ({ todos }) => (\n  <ul className=\"TodoList\">\n    {todos.map((todo) => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </ul>\n);\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [newTodos, setNewTodos] = useState(todos);\n  const [selectedUser, setSelectedUser] = useState('0');\n  const [title, setTitle] = useState('');\n  const [isTitleError, setIsTitleError] = useState(false);\n  const [isSelectError, setIsSelectError] = useState(false);\n\n  const handleChanges = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    if (name === 'titleInput') {\n      setTitle(value);\n      setIsTitleError(false);\n    }\n\n    if (name === 'userSelect') {\n      setSelectedUser(value);\n      setIsSelectError(false);\n    }\n  };\n\n  const onFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const newId = Math.max(...newTodos.map(todo => todo.id));\n    const addNewTodo = () => {\n      if (!(title && (selectedUser !== '0'))) {\n        setIsSelectError(true);\n        setIsTitleError(true);\n\n        return;\n      }\n\n      setNewTodos([\n        ...newTodos,\n        {\n          id: newId + 1,\n          title,\n          completed: false,\n          userId: +selectedUser,\n          user: getUser(+selectedUser),\n        },\n      ]);\n\n      setTitle('');\n      setSelectedUser('0');\n      setIsSelectError(false);\n      setIsTitleError(false);\n    };\n\n    addNewTodo();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={onFormSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">\n            Title:\n            <input\n              type=\"text\"\n              id=\"title\"\n              name=\"titleInput\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={title}\n              onChange={handleChanges}\n            />\n            {(!title && isTitleError) && (\n              <span className=\"error\">Please enter a title</span>\n            )}\n          </label>\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              id=\"userSelect\"\n              name=\"userSelect\"\n              value={selectedUser}\n              onChange={handleChanges}\n            >\n              <option value=\"0\" key={0} disabled>Choose a user</option>\n              {usersFromServer.map(user => (\n                <option value={user.id} key={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n            {(selectedUser === '0' && isSelectError) && (\n              <span className=\"error\">\n                Please choose a user\n              </span>\n            )}\n          </label>\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <section className=\"TodoList\">\n        <TodoList todos={newTodos} />\n      </section>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}